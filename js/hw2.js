// Task 1
// Запиши условие в инструкции if так, чтобы функция работала правильно.

function checkAge(age) {
    if (age >= 18) { // Дополни эту строку
      return 'Вы совершеннолетний человек';
    }
  
    return 'Вы не совершеннолетний человек';
  }


// Task 2
// Функция checkPassword получает пароль пользователя в параметр password, проверяет его на совпадение с паролем администратора 
// в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения.
// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат»:
// удали переменную message;
// удали else;
// код должен работать так же, как и до оптимизации.

function checkPassword(password) {
    const ADMIN_PASSWORD = 'jqueryismyjam';
    // Пиши код ниже этой строки
  
    if (password === ADMIN_PASSWORD) {
      return 'Добро пожаловать!';
    } 
      return 'Доступ запрещен, неверный пароль!';
    
    // Пиши код выше этой строки
  }


// Task 3
// Функция checkStorage проверяет возможность оформления заказа и возвращает сообщение о результате. 
// Она принимает два параметра, значения которых будут задаваться во время её вызова.
// available - доступное количество товаров на складе;
// ordered - количество единиц товара в заказе.
// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат».

function checkStorage(available, ordered) {
    // Пиши код ниже этой строки
    
    if (ordered === 0) {
      return 'В заказе еще нет товаров';
    } 
    if (ordered > available) {
      return 'Слишком большой заказ, на складе недостаточно товаров!';
    } 
      return 'Заказ оформлен, с вами свяжется менеджер';
    
    // Пиши код выше этой строки
  }


//   Task 4
//   Объяви переменную fruits и присвой ей массив фруктов - строк 'яблоко', 'слива', 'груша' и 'апельсин'.

// Пиши код ниже этой строки
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];


// Task 5
// Объяви три переменные и присвой каждой из них значение, используя нотацию квадратных скобок.
// Имя переменной	Значение переменной
// firstElement	первый элемент массива
// secondElement	второй элемент массива
// lastElement	последний элемент массива

// Стартовый код
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];
// Пиши код ниже этой строки
const firstElement = fruits[0];
const secondElement = fruits[1];
const lastElement = fruits[3];


// Task 6
// Переопредели значения элементов с индексами 1 и 3. Замени 'слива' на 'персик', а 'апельсин' на 'банан'.

// Стартовый код
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];
// Пиши код ниже этой строки
fruits[1] = 'персик';
fruits[3] = 'банан';


// Task 7
// Объяви переменную fruitsArrayLength и присвой ей длину массива fruits используя свойство length.

// Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки
const fruitsArrayLength = fruits.length;


// Task 8
// Объяви две переменные:
// Имя переменной	Ожидаемое значение
// lastElementIndex	индекс последнего элемента масcива fruits через длина_массива - 1
// lastElement	значение последнего элемента массива

// Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки

const lastElementIndex = fruits.length - 1;
const lastElement = fruits[lastElementIndex];


// Task 9
// Напиши функцию getExtremeElements(array) которая принимает один параметр array - массив элементов произвольной длины. 
// Функция должна возвращать массив из двух элементов - первого и последнего элемента параметра array.

function getExtremeElements(array) {
    // Пиши код ниже этой строки
    const firstArray = array[0];
  const lastArray = array[array.length - 1];
  
  return [firstArray, lastArray];

    // Пиши код выше этой строки
  }


// Task 10
// Дополни код функции splitMessage(message, delimeter) так, 
// чтобы она возвращала в переменной words результат разделения строки message по разделителю delimeter - массив строк.

function splitMessage(message, delimeter) {
    let words;
    // Пиши код ниже этой строки
     words = message.split(delimeter);
    
    
    // Пиши код выше этой строки
    return words;
  }


// Task 11
// Сервису гравировки украшений нужна функция, которая бы автоматически считала цену гравировки, в зависимости от количества слов и цены за слово.
// Объявлена функция calculateEngravingPrice(message, pricePerWord). Эта функция принимает строку, 
// состоящую из слов разделённых только пробелами (параметр message) и цену гравировки одного слова (параметр pricePerWord).
// Напиши тело функции, чтобы она возвращала общую стоимость гравировки всех слов в строке. 